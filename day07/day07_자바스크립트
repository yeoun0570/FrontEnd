1. 함수
    a. 함수를 사용하는 이유
        i. 자바스크립트에서 함수란 문제 해결을 위한 논리적인 흐름을 문장으로 구현하고, 코드 블럭으로 감싸서 하나의 실행단위를 정의한 것
        ii. 즉, 함수 사용은 문제 해결을 위해서 로직을 구현하고, 이를 재사용하기 위해 사용한다.
        iii. 함수는 함수 정의에 의해 생성된다.
            function add(x,y) {
                return x + y;
            }
            add(2,5);   // function call, invoke ==> 함수 실행은 함수 호출 중 인수가 호출될 때(이 때 메모리에 생성됨)이고 이것을 invoke라고 부른다.

    b. 함수 리터럴
        i. 자바스크립트에서 함수는 객체 타입의 값
            let func1 = function add(x,y) {     // 함수 리터럴을 변수 func1에 할당하였다.
                return x + y;
            } // 함수(){}를 스코프이고 함수 body라고 부른다.

        ii. 함수 리터럴은 function 키워드, 함수이름, 매개변수, 함수 몸체(body)로 구성된다.
        iii. 리터럴은 상수라는 의미도 있지만 사람이 이해할 수 있는 문자 또는 약속된 기호들을 사용하여 값을 생성하는 표기방식을 말한다. 즉, 값을 생성하기 위한 표기법
    c. 함수 정의
        i. 선언, 표현식, 함수 생성 시점, 함수 호이스팅
            1. function add(x,y) { return x+y; }; //함수 선언문 정의
            2. var sub = function (x,y) { return x-y; }; //함수 표현식 정의
            3. 함수 선언문 함수(런타임 이전에 자바스크립트 엔전에 의해 먼저 실행됨)
                a. 런타임 이전에 함수객체 생성
                b. 자바스크립트 엔진은 함수 이름과 동일한 이름의 식별자를 생성하고 생성된 함수객체를 할당
            4. 함수 선언문이 코드의 끌올처럼 동작하는 자바스크립트 고유의 특징을 함수 호이스팅이라고 한다.
            5. 함수 표현식 함수는 함수 생성 시점이 다르다.
                a. 변수에 함수 리터럴이 할당
                b. 런타임에 실행된다.(한줄한줄 순서에 맞게 실행된다.)
                c. REST API 프로젝트에서는 함수 표현식을 이용하여 작업
                d. let add = function (x,y) {return x+y;};
        ii. function 생성자 함수
        iii. 화살표 함수
            1. function sum(a,b) { let result a=b; return result;}
                let sum = (a,b) => a+b; // 위의 식을 화살표 함수로 변환
        iv. alert()
            1. 메시지 보여주기(확인창, 모달(modal))
        v. prompt()
            1. 사용자에게 텍스트를 입력하라는 메시지를 띄움
            2. 확인 : 사용자가 입력한 문자열이 반환
            3. 취소 : (null)
        vi. confirm()
            1. 사용자가 확인 또는 취소 버튼을 누를때까지 메시지창 보여줌
            2. 확인버튼 : true
            3. 취소버튼 : false 
    d. 함수 호출
        i. 매개변수와 인수
        ii. 인수 확인
        iii. 매개변수의 최대 개수
        iv. 반복문
    e. 참조에 의해서 전달되는 값, 상태 변경
    f. **JSON과 JSON처리 메서드
        i. 복잡한 객체를 다룰것이다.
        ii. 네트워크를 통해 어딘가로 보내거나, 로깅 목적으로 객체를 출력해야 하는상황
        iii. 객체를 문자열로 전환하여 처리해야 한다.
        iv. JSON(JavaScript Object Notation) : 값이나 객체를 나타내는 데이터 반응 포맷
            1. JSON.Stringify 메서드 : 객체를 JSON으로 변환
            2. JSON.parse 메서드 : JSON을 객체로 변환

2. 다양한 함수
    a. 즉시 실행 함수
        i. 함수정의와 동시에 호출되는 함수
        ii. 단 한번 호출해서 다시 호출 불가능
        iii. 보통 함수 이름이 없게 사용한다.(function (), () =>)
    b. 재귀 함수
        i. 자기자신을 다시 호출하는 것을 재귀호출(recursive call)이라고 한다.
        ii. 재귀호출을 수행하는 함수
        iii. function countDown(number) {
               for(let i = number; i>= 0; i--) console.log(i);
                }          
            //위의 함수를 재귀함수로 바꾼경우가 아래
            function countdown(number) {
               if(number < 0) return;
                console.log(number);
                countdown(number-1);
                }               
    c. 중첩 함수
        i. 함수내역 함수를 정의한 함수를 중첩함수(neted function, inner function)
        ii. 함수 내부에서만 호출 가능
    d. 콜백 함수
        i. 함수의 매개변수를 통해서 다른 함수의 내부로 전달되는 함수
        ii. 고차함수(Higher-Order-function(HOF))
            1. 매개변수를 통해서 함수의 외부에서 콜백함수를 전달받은 함수
            2. 고차함수는 필요에 따라 콜백함수에 인수를 전달할 수 있다.

3. 클로저, 실행 컨텍스트

4. DOM

5. 정규표현식

6. 이벤트

7. 비동기 프로그램

8. Ajax

9. REST API

10. 프로미스

11. 제너레이터, async/await

12. 에러 처리
